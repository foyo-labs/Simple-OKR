// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package app

import (
	"github.com/laidingqing/sokr/internal/api"
	"github.com/laidingqing/sokr/internal/repository"
	"github.com/laidingqing/sokr/internal/service"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitObjectiveAPI(db *gorm.DB) api.ObjectivesAPI {
	iObjectiveRepository := repository.NewObjectiveRepository(db)
	iKeyResultRepository := repository.NewKeyResultRepository(db)
	iGroupObjectiveRepository := repository.NewGroupObjectiveRepository(db)
	iUserObjectiveRepository := repository.NewUserObjectiveRepository(db)
	trans := repository.NewTrans(db)
	iObjectiveService := service.NewObjectiveService(iObjectiveRepository, iKeyResultRepository, iGroupObjectiveRepository, iUserObjectiveRepository, trans)
	objectivesAPI := api.NewObjectivesAPI(iObjectiveService)
	return objectivesAPI
}

func InitUserAPI(db *gorm.DB) api.UserAPI {
	iUserRepository := repository.NewUserRepository(db)
	iUserGroupRepository := repository.NewUserGroupRepository(db)
	iGroupRepository := repository.NewGroupRepository(db)
	trans := repository.NewTrans(db)
	iUserService := service.NewUserService(iUserRepository, iUserGroupRepository, iGroupRepository, trans)
	iGroupService := service.NewGroupService(iGroupRepository, iUserGroupRepository, trans)
	userAPI := api.NewUserAPI(iUserService, iGroupService)
	return userAPI
}

func InitGroupAPI(db *gorm.DB) api.GroupAPI {
	iGroupRepository := repository.NewGroupRepository(db)
	iUserGroupRepository := repository.NewUserGroupRepository(db)
	trans := repository.NewTrans(db)
	iGroupService := service.NewGroupService(iGroupRepository, iUserGroupRepository, trans)
	groupAPI := api.NewGroupAPI(iGroupService)
	return groupAPI
}
